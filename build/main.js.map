{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v1.16.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from \"@iobroker/adapter-core\";\r\nimport {\r\n\tConnection,\r\n\tGateway,\r\n\tGroups,\r\n\tGW_GET_STATE_CFM,\r\n\tGW_REBOOT_CFM,\r\n\tIConnection,\r\n\tIGW_FRAME_RCV,\r\n\tProducts,\r\n\tScenes,\r\n} from \"klf-200-api\";\r\nimport { Disposable } from \"klf-200-api/dist/utils/TypedEvent\";\r\nimport { Job, scheduleJob } from \"node-schedule\";\r\nimport { Setup } from \"./setup\";\r\nimport { SetupGroups } from \"./setupGroups\";\r\nimport { SetupProducts } from \"./setupProducts\";\r\nimport { SetupScenes } from \"./setupScenes\";\r\nimport { ArrayCount, convertErrorToString } from \"./util/utils\";\r\n\r\n// Load your modules here, e.g.:\r\n// import * as fs from \"fs\";\r\n\r\n// Augment the adapter.config object with the actual types\r\n// TODO: delete this in the next version\r\ndeclare global {\r\n\t// eslint-disable-next-line @typescript-eslint/no-namespace\r\n\tnamespace ioBroker {\r\n\t\tinterface AdapterConfig {\r\n\t\t\t// Define the shape of your options here (recommended)\r\n\t\t\thost: string;\r\n\t\t\tpassword: string;\r\n\t\t\tenableAutomaticReboot: boolean;\r\n\t\t\tautomaticRebootCronTime: string;\r\n\t\t\tadvancedSSLConfiguration: boolean;\r\n\t\t\tSSLPublicKey: string;\r\n\t\t\tSSLFingerprint: string;\r\n\t\t\t// Or use a catch-all approach\r\n\t\t\t// [key: string]: any;\r\n\t\t}\r\n\t}\r\n}\r\n\r\ntype ConnectionWatchDogHandler = (hadError: boolean) => Promise<void>;\r\n\r\nclass Klf200 extends utils.Adapter {\r\n\tprivate disposables: Disposable[] = [];\r\n\tprivate connectionWatchDogHandler: ConnectionWatchDogHandler;\r\n\tprivate InShutdown: boolean;\r\n\r\n\tprivate _Connection?: IConnection;\r\n\tpublic get Connection(): IConnection | undefined {\r\n\t\treturn this._Connection;\r\n\t}\r\n\r\n\tprivate _Gateway?: Gateway;\r\n\tpublic get Gateway(): Gateway | undefined {\r\n\t\treturn this._Gateway;\r\n\t}\r\n\r\n\tprivate _Groups?: Groups;\r\n\tpublic get Groups(): Groups | undefined {\r\n\t\treturn this._Groups;\r\n\t}\r\n\r\n\tprivate _Scenes?: Scenes;\r\n\tpublic get Scenes(): Scenes | undefined {\r\n\t\treturn this._Scenes;\r\n\t}\r\n\r\n\tprivate _Products?: Products;\r\n\tpublic get Products(): Products | undefined {\r\n\t\treturn this._Products;\r\n\t}\r\n\r\n\tprivate _Setup?: Setup;\r\n\tpublic get Setup(): Setup | undefined {\r\n\t\treturn this._Setup;\r\n\t}\r\n\r\n\tprivate _RebootJob?: Job;\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: \"klf200\",\r\n\t\t});\r\n\r\n\t\t// Trace unhandled errors\r\n\t\tprocess.on(\"unhandledRejection\", this.onUnhandledRejection.bind(this));\r\n\t\tprocess.on(\"uncaughtException\", this.onUnhandledError.bind(this));\r\n\r\n\t\tthis.on(\"ready\", this.onReady.bind(this));\r\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\r\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\r\n\t\t// this.on(\"message\", this.onMessage.bind(this));\r\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\r\n\r\n\t\t// Setup connection watchdog handler\r\n\t\tthis.InShutdown = false;\r\n\t\tthis.connectionWatchDogHandler = this.ConnectionWatchDog.bind(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReady(): Promise<void> {\r\n\t\ttry {\r\n\t\t\t// Initialize your adapter here\r\n\r\n\t\t\t// Reset the connection indicator during startup\r\n\t\t\tawait this.setStateAsync(\"info.connection\", false, true);\r\n\r\n\t\t\t// Decrypt password\r\n\t\t\tconst systemConfig = await this.getForeignObjectAsync(\"system.config\");\r\n\t\t\tif (!this.supportsFeature || !this.supportsFeature(\"ADAPTER_AUTO_DECRYPT_NATIVE\")) {\r\n\t\t\t\tthis.config.password = this.decrypt(this.config.password);\r\n\t\t\t}\r\n\r\n\t\t\t// Setup connection and initialize objects and states\r\n\t\t\tif (!this.config.advancedSSLConfiguration) {\r\n\t\t\t\tthis._Connection = new Connection(this.config.host);\r\n\t\t\t} else {\r\n\t\t\t\tthis._Connection = new Connection(\r\n\t\t\t\t\tthis.config.host,\r\n\t\t\t\t\tBuffer.from(this.config.SSLPublicKey),\r\n\t\t\t\t\tthis.config.SSLFingerprint,\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tthis.log.info(`Host: ${this.config.host}`);\r\n\t\t\ttry {\r\n\t\t\t\tawait this.Connection?.loginAsync(this.config.password);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthis.terminate(`Login to KLF-200 device at ${this.config.host} failed.`);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.log.info(\"Connected to interface.\");\r\n\r\n\t\t\t// Read data from the gateway and setup states and handlers\r\n\t\t\tawait this.initializeOnConnection();\r\n\r\n\t\t\t// Set up reboot schedule, if enabled\r\n\t\t\tif (this.config.enableAutomaticReboot === true) {\r\n\t\t\t\tthis.log.info(\"Automatic reboot enabled in configuration. Planning reboot job.\");\r\n\t\t\t\tthis._RebootJob = scheduleJob(this.config.automaticRebootCronTime, this.onReboot.bind(this));\r\n\t\t\t} else {\r\n\t\t\t\tthis.log.info(\"Automatic reboot disabled in configuration.\");\r\n\t\t\t}\r\n\r\n\t\t\t// Set the connection indicator to true\r\n\t\t\tawait this.setStateAsync(\"info.connection\", true, true);\r\n\t\t} catch (e) {\r\n\t\t\tthis.log.error(`Error during initialization of the adapter.`);\r\n\t\t\tlet result = convertErrorToString(e);\r\n\t\t\tthis.log.error(result);\r\n\t\t\tthis.terminate ? this.terminate(result) : process.exit(1);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async initializeOnConnection(): Promise<void> {\r\n\t\t// Read device info, scenes, groups and products and setup device\r\n\t\tthis.log.info(`Reading device information...`);\r\n\t\tthis._Gateway = new Gateway(this.Connection!);\r\n\r\n\t\tthis.log.info(`Enabling the house status monitor...`);\r\n\t\tawait this.Gateway?.enableHouseStatusMonitorAsync();\r\n\r\n\t\tthis.log.info(`Setting UTC clock to the current time.`);\r\n\t\tawait this.Gateway?.setUTCDateTimeAsync();\r\n\r\n\t\tthis.log.info(`Setting time zone to :GMT+1:GMT+2:0060:(1994)040102-0:110102-0`);\r\n\t\tawait this.Gateway?.setTimeZoneAsync(\":GMT+1:GMT+2:0060:(1994)040102-0:110102-0\");\r\n\r\n\t\tthis.log.info(`Reading scenes...`);\r\n\t\tthis._Scenes = await Scenes.createScenesAsync(this.Connection!);\r\n\t\tthis.log.info(`${ArrayCount(this.Scenes!.Scenes)} scenes found.`);\r\n\r\n\t\tthis.log.info(`Reading groups...`);\r\n\t\tthis._Groups = await Groups.createGroupsAsync(this.Connection!);\r\n\t\tthis.log.info(`${ArrayCount(this.Groups!.Groups)} groups found.`);\r\n\r\n\t\tthis.log.info(`Reading products...`);\r\n\t\tthis._Products = await Products.createProductsAsync(this.Connection!);\r\n\t\tthis.log.info(`${ArrayCount(this.Products!.Products)} products found.`);\r\n\r\n\t\t// Setup states\r\n\t\tthis._Setup = await Setup.setupGlobalAsync(this, this.Gateway!);\r\n\t\tthis.disposables.push(this._Setup);\r\n\t\tthis.disposables.push(...(await SetupScenes.createScenesAsync(this, this.Scenes?.Scenes ?? [])));\r\n\t\tthis.disposables.push(\r\n\t\t\t...(await SetupGroups.createGroupsAsync(this, this.Groups?.Groups ?? [], this.Products?.Products ?? [])),\r\n\t\t);\r\n\t\tthis.disposables.push(...(await SetupProducts.createProductsAsync(this, this.Products?.Products ?? [])));\r\n\r\n\t\tthis.log.info(`Setting up notification handlers for removal...`);\r\n\t\t// Setup remove notification\r\n\t\tthis.disposables.push(\r\n\t\t\tthis.Scenes!.onRemovedScene(this.onRemovedScene.bind(this)),\r\n\t\t\tthis.Products!.onRemovedProduct(this.onRemovedProduct.bind(this)),\r\n\t\t\tthis.Groups!.onRemovedGroup(this.onRemovedGroup.bind(this)),\r\n\t\t);\r\n\r\n\t\tthis.log.info(`Setting up notification handlers for discovering new objects...`);\r\n\t\tthis.disposables.push(\r\n\t\t\tthis.Products!.onNewProduct(this.onNewProduct.bind(this)),\r\n\t\t\tthis.Groups!.onChangedGroup(this.onNewGroup.bind(this)),\r\n\t\t);\r\n\r\n\t\tthis.log.info(`Setting up notification handler for gateway state...`);\r\n\t\tthis.disposables.push(this._Connection!.on(this.onFrameReceived.bind(this)));\r\n\r\n\t\t// Write a finish setup log entry\r\n\t\tthis.log.info(`Adapter is ready for use.`);\r\n\r\n\t\t// Start state timer\r\n\t\tthis.log.info(`Starting background state refresher...`);\r\n\t\tthis._Setup?.startStateTimer();\r\n\r\n\t\tthis.Connection?.KLF200SocketProtocol?.socket.on(\"close\", this.connectionWatchDogHandler);\r\n\t}\r\n\r\n\tprivate async disposeOnConnectionClosed(): Promise<void> {\r\n\t\t// Remove watchdog handler from socket\r\n\t\tthis.log.info(`Remove socket listener...`);\r\n\t\tthis.Connection?.KLF200SocketProtocol?.socket.off(\"close\", this.connectionWatchDogHandler);\r\n\r\n\t\t// Disconnect all event handlers\r\n\t\tthis.log.info(`Shutting down event handlers...`);\r\n\t\tthis.disposables.forEach((disposable) => {\r\n\t\t\tdisposable.dispose();\r\n\t\t});\r\n\t}\r\n\r\n\tprivate async ConnectionWatchDog(hadError: boolean): Promise<void> {\r\n\t\t// Stop the state timer first\r\n\t\tthis._Setup?.stopStateTimer();\r\n\r\n\t\t// Reset the connection indicator\r\n\t\tawait this.setStateAsync(\"info.connection\", false, true);\r\n\t\tthis.log.warn(\"Lost connection to KLF-200\");\r\n\t\tif (hadError === true) {\r\n\t\t\tthis.log.error(\"The underlying connection has been closed due to some error.\");\r\n\t\t}\r\n\r\n\t\t// Clean up\r\n\t\tawait this.disposeOnConnectionClosed();\r\n\r\n\t\t// Try to reconnect\r\n\t\tthis.log.info(\"Trying to reconnect...\");\r\n\t\tlet isConnected = false;\r\n\t\twhile (!isConnected && !this.InShutdown) {\r\n\t\t\ttry {\r\n\t\t\t\tawait this.Connection?.loginAsync(this.config.password);\r\n\t\t\t\tisConnected = true;\r\n\t\t\t\tthis.log.info(\"Reconnected.\");\r\n\t\t\t\tawait this.setStateAsync(\"info.connection\", true, true);\r\n\r\n\t\t\t\tawait this.initializeOnConnection();\r\n\t\t\t} catch (e) {\r\n\t\t\t\tthis.log.error(`Login to KLF-200 device at ${this.config.host} failed.`);\r\n\t\t\t\tlet result = convertErrorToString(e);\r\n\t\t\t\tthis.log.error(result);\r\n\t\t\t\t// Wait a second before retry\r\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, 1000));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async onRemovedScene(sceneId: number): Promise<void> {\r\n\t\tawait this.deleteChannelAsync(`scenes`, `${sceneId}`);\r\n\t}\r\n\r\n\tprivate async onRemovedProduct(productId: number): Promise<void> {\r\n\t\tawait this.deleteChannelAsync(`products`, `${productId}`);\r\n\t}\r\n\r\n\tprivate async onRemovedGroup(groupId: number): Promise<void> {\r\n\t\tawait this.deleteChannelAsync(`groups`, `${groupId}`);\r\n\t}\r\n\r\n\tprivate async onNewProduct(productId: number): Promise<Disposable[]> {\r\n\t\tconst newProduct = this._Products?.Products[productId];\r\n\t\tif (newProduct) {\r\n\t\t\treturn await SetupProducts.createProductAsync(this, newProduct);\r\n\t\t} else {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async onNewGroup(groupId: number): Promise<Disposable[]> {\r\n\t\tconst newGroup = this._Groups?.Groups[groupId];\r\n\t\tif (newGroup) {\r\n\t\t\treturn await SetupGroups.createGroupAsync(this, newGroup, this._Products?.Products!);\r\n\t\t} else {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async onFrameReceived(frame: IGW_FRAME_RCV): Promise<void> {\r\n\t\tthis.log.debug(`Frame received: ${JSON.stringify(frame)}`);\r\n\t\tif (!(frame instanceof GW_GET_STATE_CFM) && !(frame instanceof GW_REBOOT_CFM)) {\r\n\t\t\t// Confirmation messages of the GW_GET_STATE_REQ must be ignored to avoid an infinity loop\r\n\t\t\tawait this.Setup?.stateTimerHandler(this, this.Gateway!);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async onReboot(): Promise<void> {\r\n\t\tthis.log.info(\"Automatic reboot due to schedule in configuration\");\r\n\t\tthis.Setup?.stopStateTimer();\r\n\t\tawait this.setStateAsync(`gateway.RebootGateway`, true, false);\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate async onUnload(callback: () => void): Promise<void> {\r\n\t\ttry {\r\n\t\t\t// Set shutdown flag\r\n\t\t\tthis.InShutdown = true;\r\n\r\n\t\t\tawait this.disposeOnConnectionClosed();\r\n\r\n\t\t\t// Disconnect from the device\r\n\t\t\tthis.log.info(`Disconnecting from the KLF-200...`);\r\n\t\t\tawait this.Connection?.logoutAsync();\r\n\r\n\t\t\tthis.log.info(\"Cleaned everything up...\");\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\t// /**\r\n\t//  * Is called if a subscribed object changes\r\n\t//  */\r\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n\t// \tif (obj) {\r\n\t// \t\t// The object was changed\r\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n\t// \t} else {\r\n\t// \t\t// The object was deleted\r\n\t// \t\tthis.log.info(`object ${id} deleted`);\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n\t\tif (state) {\r\n\t\t\t// The state was changed\r\n\t\t\tthis.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\t\t} else {\r\n\t\t\t// The state was deleted\r\n\t\t\tthis.log.debug(`state ${id} deleted`);\r\n\t\t}\r\n\t}\r\n\r\n\t// /**\r\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n\t//  * Using this method requires \"common.message\" property to be set to true in io-package.json\r\n\t//  */\r\n\t// private onMessage(obj: ioBroker.Message): void {\r\n\t// \tif (typeof obj === \"object\" && obj.message) {\r\n\t// \t\tif (obj.command === \"send\") {\r\n\t// \t\t\t// e.g. send email or pushover or whatever\r\n\t// \t\t\tthis.log.info(\"send command\");\r\n\r\n\t// \t\t\t// Send response in callback if required\r\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\r\n\tgetErrorMessage(err: Error | string): string {\r\n\t\t// Irgendwo gibt es wohl einen Fehler ohne Message\r\n\t\tif (err == null) return \"undefined\";\r\n\t\tif (typeof err === \"string\") return err;\r\n\t\tif (err.message != null) return err.message;\r\n\t\tif (err.name != null) return err.name;\r\n\t\treturn err.toString();\r\n\t}\r\n\r\n\tonUnhandledRejection(reason: {} | null | undefined, promise: Promise<any>): void {\r\n\t\t((this && this.log) || console).error(\r\n\t\t\t`Unhandled promise rejection detected. reason: ${JSON.stringify(reason)}, promise: ${JSON.stringify(\r\n\t\t\t\tpromise,\r\n\t\t\t)}`,\r\n\t\t);\r\n\t\tthis.terminate(\"unhandled promise rejection\", 1);\r\n\t}\r\n\r\n\tonUnhandledError(error: Error): void {\r\n\t\t((this && this.log) || console).error(`Unhandled exception occured: ${error}`);\r\n\t\tthis.terminate(\"unhandled exception\", 1);\r\n\t}\r\n}\r\n\r\nif (module.parent) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options?: Partial<utils.AdapterOptions>) => new Klf200(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new Klf200())();\r\n}\r\n"],
  "mappings": "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",
  "names": []
}

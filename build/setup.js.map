{
  "version": 3,
  "sources": ["../src/setup.ts"],
  "sourcesContent": ["\"use strict\";\r\n\r\nimport { Gateway } from \"klf-200-api\";\r\nimport { Disposable } from \"klf-200-api/dist/utils/TypedEvent\";\r\nimport { TimeoutError } from \"promise-timeout\";\r\nimport { ComplexStateChangeHandler } from \"./util/propertyLink\";\r\nimport { StateHelper } from \"./util/stateHelper\";\r\n\r\nexport class Setup implements Disposable {\r\n\tconstructor(readonly adapter: ioBroker.Adapter, readonly gateway: Gateway) {}\r\n\r\n\tprivate disposableEvents: Disposable[] = [];\r\n\r\n\tdispose(): void {\r\n\t\tthis.stopStateTimer();\r\n\t\tthis.disposableEvents.forEach((disposable) => {\r\n\t\t\tdisposable.dispose();\r\n\t\t});\r\n\t}\r\n\r\n\tprivate _stateTimer?: ReturnType<typeof setTimeout>;\r\n\r\n\tpublic startStateTimer(): void {\r\n\t\tif (this._stateTimer === undefined) {\r\n\t\t\tthis._stateTimer = setTimeout(\r\n\t\t\t\tasync (adapter, gateway) => {\r\n\t\t\t\t\tthis._stateTimer = undefined; // Timer has fired -> delete timer id\r\n\t\t\t\t\tawait this.stateTimerHandler(adapter, gateway);\r\n\t\t\t\t},\r\n\t\t\t\t5 * 60 * 1000,\r\n\t\t\t\tthis.adapter,\r\n\t\t\t\tthis.gateway,\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic stopStateTimer(): void {\r\n\t\tif (this._stateTimer !== undefined) {\r\n\t\t\ttry {\r\n\t\t\t\tclearTimeout(this._stateTimer);\r\n\t\t\t} finally {\r\n\t\t\t\tthis._stateTimer = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstateTimerHandlerActive = false;\r\n\r\n\tpublic async stateTimerHandler(adapter: ioBroker.Adapter, gateway: Gateway): Promise<void> {\r\n\t\tthis.stopStateTimer();\r\n\r\n\t\ttry {\r\n\t\t\tif (!this.stateTimerHandlerActive) {\r\n\t\t\t\t// Read state from the gateway only, if this is a new request, otherwise there could be a race condition that leads to a timeout\r\n\r\n\t\t\t\tthis.stateTimerHandlerActive = true;\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst GatewayState = await gateway.getStateAsync();\r\n\t\t\t\t\tawait adapter.setStateChangedAsync(\"gateway.GatewayState\", GatewayState.GatewayState, true);\r\n\t\t\t\t\tawait adapter.setStateChangedAsync(\"gateway.GatewaySubState\", GatewayState.SubState, true);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tif (e instanceof TimeoutError) {\r\n\t\t\t\t\t\tadapter.log.error(`Timemout occured during getting the current gateway status.`);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tadapter.log.error(`Error occured during getting the current gateway status.`);\r\n\t\t\t\t\t\tadapter.log.error(`Error details: ${e}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t} finally {\r\n\t\t\t\t\t// Reset the flag, so that the next call to this method will query the gateway again.\r\n\t\t\t\t\tthis.stateTimerHandlerActive = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} finally {\r\n\t\t\t// Start the next timer, but only if we are connected\r\n\t\t\tif (gateway.connection.KLF200SocketProtocol !== undefined) {\r\n\t\t\t\tthis.startStateTimer();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static async setupGlobalAsync(adapter: ioBroker.Adapter, gateway: Gateway): Promise<Setup> {\r\n\t\tconst newSetup = new Setup(adapter, gateway);\r\n\r\n\t\t// Setup products device\r\n\t\tawait adapter.setObjectNotExistsAsync(\"products\", {\r\n\t\t\ttype: \"device\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"products\",\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\t\tawait adapter.setObjectNotExistsAsync(\"products.productsFound\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"Number of products found\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tdef: 0,\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: \"Number of products connected to the interface\",\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\t// Setup scenes device\r\n\t\tawait adapter.setObjectNotExistsAsync(\"scenes\", {\r\n\t\t\ttype: \"device\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"scenes\",\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\t\tawait adapter.setObjectNotExistsAsync(\"scenes.scenesFound\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"Number of scenes found\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tdef: 0,\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: \"Number of scenes defined in the interface\",\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\t// Setup groups device\r\n\t\tawait adapter.setObjectNotExistsAsync(\"groups\", {\r\n\t\t\ttype: \"device\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"groups\",\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\t\tawait adapter.setObjectNotExistsAsync(\"groups.groupsFound\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"Number of groups found\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tdef: 0,\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: \"Number of groups defined in the interface\",\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\t// Setup gateway device\r\n\t\tawait adapter.setObjectNotExistsAsync(\"gateway\", {\r\n\t\t\ttype: \"device\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"gateway\",\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tconst ProtocolVersion = await gateway.getProtocolVersionAsync();\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t\"gateway.ProtocolVersion\",\r\n\t\t\t{\r\n\t\t\t\tname: \"Protocol version\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"string\",\r\n\t\t\t\tdef: \"\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: \"Version of the protocol with which the software of the gateway is compatible\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\t`${ProtocolVersion.MajorVersion}.${ProtocolVersion.MinorVersion}`,\r\n\t\t);\r\n\r\n\t\tconst Version = await gateway.getVersionAsync();\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t\"gateway.SoftwareVersion\",\r\n\t\t\t{\r\n\t\t\t\tname: \"SoftwareVersion\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"string\",\r\n\t\t\t\tdef: \"\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: \"Software version number\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\t`${Version.SoftwareVersion.CommandVersion}.${Version.SoftwareVersion.MainVersion}.${Version.SoftwareVersion.SubVersion}.${Version.SoftwareVersion.BranchID}.${Version.SoftwareVersion.Build}.${Version.SoftwareVersion.MicroBuild}`,\r\n\t\t);\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t\"gateway.HardwareVersion\",\r\n\t\t\t{\r\n\t\t\t\tname: \"HardwareVersion\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tdef: \"\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: \"Hardware version number\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tVersion.HardwareVersion,\r\n\t\t);\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t\"gateway.ProductGroup\",\r\n\t\t\t{\r\n\t\t\t\tname: \"ProductGroup\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tdef: \"\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: \"Product group\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tVersion.ProductGroup,\r\n\t\t);\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t\"gateway.ProductType\",\r\n\t\t\t{\r\n\t\t\t\tname: \"ProductType\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tdef: \"\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: \"Product type\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tVersion.ProductType,\r\n\t\t);\r\n\r\n\t\tconst gatewayState = await gateway.getStateAsync();\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t\"gateway.GatewayState\",\r\n\t\t\t{\r\n\t\t\t\tname: \"GatewayState\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tmax: 255,\r\n\t\t\t\tdef: 0,\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: \"Gateway state\",\r\n\t\t\t\tstates: {\r\n\t\t\t\t\t\"0\": \"TestMode\",\r\n\t\t\t\t\t\"1\": \"GatewayMode_NoActuatorNodes\",\r\n\t\t\t\t\t\"2\": \"GatewayMode_WithActuatorNodes\",\r\n\t\t\t\t\t\"3\": \"BeaconMode_NotConfigured\",\r\n\t\t\t\t\t\"4\": \"BeaconMode_Configured\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tgatewayState.GatewayState,\r\n\t\t);\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t\"gateway.GatewaySubState\",\r\n\t\t\t{\r\n\t\t\t\tname: \"GatewaySubState\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tmax: 255,\r\n\t\t\t\tdef: 0,\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: \"Gateway sub state\",\r\n\t\t\t\tstates: {\r\n\t\t\t\t\t\"0\": \"Idle\",\r\n\t\t\t\t\t\"1\": \"RunningConfigurationService\",\r\n\t\t\t\t\t\"2\": \"RunningSceneConfiguration\",\r\n\t\t\t\t\t\"3\": \"RunningInformationServiceConfiguration\",\r\n\t\t\t\t\t\"4\": \"RunningContactInputConfiguration\",\r\n\t\t\t\t\t\"128\": \"RunningCommand\",\r\n\t\t\t\t\t\"129\": \"RunningActivateGroup\",\r\n\t\t\t\t\t\"130\": \"RunningActivateScene\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tgatewayState.SubState,\r\n\t\t);\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t\"gateway.RebootGateway\",\r\n\t\t\t{\r\n\t\t\t\tname: \"RebootGateway\",\r\n\t\t\t\trole: \"button.stop\",\r\n\t\t\t\ttype: \"boolean\",\r\n\t\t\t\tread: false,\r\n\t\t\t\twrite: true,\r\n\t\t\t\tdesc:\r\n\t\t\t\t\t\"Reboot the gateway (this one only works, if there is still a connection to the gateway possible)\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tfalse,\r\n\t\t);\r\n\r\n\t\t// Setup gateway listeners\r\n\t\tconst rebootListener = new ComplexStateChangeHandler(adapter, `gateway.RebootGateway`, async (state) => {\r\n\t\t\tif (state !== undefined) {\r\n\t\t\t\tif (state?.val === true) {\r\n\t\t\t\t\t// Reboot, login should be done automatically by the existing logic for loss of connection\r\n\t\t\t\t\tnewSetup.adapter.log.info(\"Rebooting the adapter, connection will be lost.\");\r\n\t\t\t\t\tawait gateway.rebootAsync();\r\n\t\t\t\t\tnewSetup.adapter.log.info(\"Waiting 2 seconds after reboot for restart.\");\r\n\t\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, 2000));\r\n\t\t\t\t\tnewSetup.adapter.log.info(\"Adapter will be restartet.\");\r\n\t\t\t\t\tnewSetup.adapter.restart();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tawait rebootListener.Initialize();\r\n\t\tnewSetup.disposableEvents.push(rebootListener);\r\n\r\n\t\treturn newSetup;\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": []
}

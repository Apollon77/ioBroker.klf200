{
  "version": 3,
  "sources": ["../src/setupGroups.ts"],
  "sourcesContent": ["\"use strict\";\r\n\r\nimport { Group, GroupType, Product } from \"klf-200-api\";\r\nimport { Disposable } from \"klf-200-api/dist/utils/TypedEvent\";\r\nimport { levelConverter, roleGroupTypeConverter } from \"./util/converter\";\r\nimport {\r\n\tComplexPropertyChangedHandler,\r\n\tPercentageStateChangeHandler,\r\n\tSetterStateChangeHandler,\r\n\tSimplePropertyChangedHandler,\r\n\tSimpleStateChangeHandler,\r\n} from \"./util/propertyLink\";\r\nimport { StateHelper } from \"./util/stateHelper\";\r\nimport { ArrayCount } from \"./util/utils\";\r\n\r\nexport class SetupGroups {\r\n\tpublic static async createGroupsAsync(\r\n\t\tadapter: ioBroker.Adapter,\r\n\t\tgroups: Group[],\r\n\t\tproducts: Product[],\r\n\t): Promise<Disposable[]> {\r\n\t\tconst disposableEvents: Disposable[] = [];\r\n\r\n\t\t// Remove old groups\r\n\t\tconst currentGroupsList = await adapter.getChannelsOfAsync(`groups`);\r\n\t\tadapter.log.debug(`Current Groups List: ${JSON.stringify(currentGroupsList)}`);\r\n\t\t// Filter current channels to contain only those, that are not present in the provided groups list\r\n\t\tconst channelsToRemove = currentGroupsList.filter(\r\n\t\t\t(channel) =>\r\n\t\t\t\t!groups.some((group) => {\r\n\t\t\t\t\treturn group.GroupID === Number.parseInt(channel._id.split(\".\").reverse()[0]);\r\n\t\t\t\t}),\r\n\t\t);\r\n\t\t// Delete channels\r\n\t\tfor (const channel of channelsToRemove) {\r\n\t\t\tawait adapter.deleteChannelAsync(`groups`, channel._id);\r\n\t\t}\r\n\t\tif (channelsToRemove.length !== 0) {\r\n\t\t\tadapter.log.info(`${channelsToRemove.length} unknown groups removed.`);\r\n\t\t}\r\n\r\n\t\tfor (const group of groups) {\r\n\t\t\tif (group) {\r\n\t\t\t\tdisposableEvents.push(...(await this.createGroupAsync(adapter, group, products)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Write number of products\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t`groups.groupsFound`,\r\n\t\t\t{\r\n\t\t\t\tname: \"Number of groups found\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tdef: 0,\r\n\t\t\t\tdesc: \"Number of groups defined in the interface\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tArrayCount(groups),\r\n\t\t);\r\n\r\n\t\treturn disposableEvents;\r\n\t}\r\n\r\n\tpublic static async createGroupAsync(\r\n\t\tadapter: ioBroker.Adapter,\r\n\t\tgroup: Group,\r\n\t\tproducts: Product[],\r\n\t): Promise<Disposable[]> {\r\n\t\tconst disposableEvents: Disposable[] = [];\r\n\r\n\t\tawait adapter.setObjectNotExistsAsync(`groups.${group.GroupID}`, {\r\n\t\t\ttype: \"channel\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: group.Name,\r\n\t\t\t\trole: roleGroupTypeConverter.convert(group.GroupType),\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t`groups.${group.GroupID}.groupType`,\r\n\t\t\t{\r\n\t\t\t\tname: \"groupType\",\r\n\t\t\t\trole: roleGroupTypeConverter.convert(group.GroupType),\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: `Type of the registered group (${GroupType.House} = house, ${GroupType.Room} = room or ${GroupType.UserGroup} = user defined group)`,\r\n\t\t\t\tstates: {\r\n\t\t\t\t\t\"0\": \"UserGroup\",\r\n\t\t\t\t\t\"1\": \"Room\",\r\n\t\t\t\t\t\"2\": \"House\",\r\n\t\t\t\t\t\"3\": \"All\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tgroup.GroupType,\r\n\t\t);\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t`groups.${group.GroupID}.productsCount`,\r\n\t\t\t{\r\n\t\t\t\tname: \"productsCount\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: `Number of products that are contained in the group.`,\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tArrayCount(group.Nodes),\r\n\t\t);\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t`groups.${group.GroupID}.nodeVariation`,\r\n\t\t\t{\r\n\t\t\t\tname: \"nodeVariation\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tmax: 0xff,\r\n\t\t\t\tdesc: `Variation of the group.`,\r\n\t\t\t\tstates: {\r\n\t\t\t\t\t\"0\": \"NotSet\",\r\n\t\t\t\t\t\"1\": \"TopHung\",\r\n\t\t\t\t\t\"2\": \"Kip\",\r\n\t\t\t\t\t\"3\": \"FlatRoof\",\r\n\t\t\t\t\t\"4\": \"SkyLight\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tgroup.NodeVariation,\r\n\t\t);\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t`groups.${group.GroupID}.order`,\r\n\t\t\t{\r\n\t\t\t\tname: \"order\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tmax: 0xffff,\r\n\t\t\t\tdesc: \"Custom order of groups\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tgroup.Order,\r\n\t\t);\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t`groups.${group.GroupID}.placement`,\r\n\t\t\t{\r\n\t\t\t\tname: \"placement\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tmax: 0xff,\r\n\t\t\t\tdesc: \"Placement (house = 0 or room number)\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tgroup.Placement,\r\n\t\t);\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t`groups.${group.GroupID}.velocity`,\r\n\t\t\t{\r\n\t\t\t\tname: \"velocity\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tmax: 0xff,\r\n\t\t\t\tdesc: \"Velocity of the group\",\r\n\t\t\t\tstates: {\r\n\t\t\t\t\t\"0\": \"Default\",\r\n\t\t\t\t\t\"1\": \"Silent\",\r\n\t\t\t\t\t\"2\": \"Fast\",\r\n\t\t\t\t\t\"255\": \"NotAvailable\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tgroup.Velocity,\r\n\t\t);\r\n\r\n\t\t/*\r\n            Groups contain products of the same\r\n            product type only. To get the right role\r\n            the first node has to be fetched and\r\n            the role of that product can be used.\r\n        */\r\n\t\tawait adapter.setObjectNotExistsAsync(`groups.${group.GroupID}.targetPosition`, {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"targetPosition\",\r\n\t\t\t\trole: levelConverter.convert(products[group.Nodes[0]].TypeID),\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: false,\r\n\t\t\t\twrite: true,\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tmax: 100,\r\n\t\t\t\tunit: \"%\",\r\n\t\t\t\tdesc: \"Level in percent\",\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait adapter.setObjectNotExistsAsync(`groups.${group.GroupID}.targetPositionRaw`, {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"targetPositionRaw\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: false,\r\n\t\t\t\twrite: true,\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tmax: 0xffff,\r\n\t\t\t\tdesc: \"Target position raw value\",\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\t// Setup group listener\r\n\t\tdisposableEvents.push(\r\n\t\t\tnew SimplePropertyChangedHandler<Group>(\r\n\t\t\t\tadapter,\r\n\t\t\t\t`groups.${group.GroupID}.nodeVariation`,\r\n\t\t\t\t\"NodeVariation\",\r\n\t\t\t\tgroup,\r\n\t\t\t),\r\n\t\t\tnew SimplePropertyChangedHandler<Group>(adapter, `groups.${group.GroupID}.order`, \"Order\", group),\r\n\t\t\tnew SimplePropertyChangedHandler<Group>(adapter, `groups.${group.GroupID}.placement`, \"Placement\", group),\r\n\t\t\tnew SimplePropertyChangedHandler<Group>(adapter, `groups.${group.GroupID}.velocity`, \"Velocity\", group),\r\n\t\t\tnew SimplePropertyChangedHandler<Group>(adapter, `groups.${group.GroupID}.groupType`, \"GroupType\", group),\r\n\t\t\tnew ComplexPropertyChangedHandler<Group>(adapter, \"Nodes\", group, async (newValue) => {\r\n\t\t\t\treturn await adapter.setStateChangedAsync(\r\n\t\t\t\t\t`groups.${group.GroupID}.productsCount`,\r\n\t\t\t\t\tArrayCount(newValue as number[]),\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t);\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\tconst nodeVariationHandler = new SimpleStateChangeHandler<Group>(\r\n\t\t\tadapter,\r\n\t\t\t`groups.${group.GroupID}.nodeVariation`,\r\n\t\t\t\"NodeVariation\",\r\n\t\t\tgroup,\r\n\t\t);\r\n\t\tawait nodeVariationHandler.Initialize();\r\n\t\tdisposableEvents.push(nodeVariationHandler);\r\n\r\n\t\tconst orderHandler = new SimpleStateChangeHandler<Group>(\r\n\t\t\tadapter,\r\n\t\t\t`groups.${group.GroupID}.order`,\r\n\t\t\t\"Order\",\r\n\t\t\tgroup,\r\n\t\t);\r\n\t\tawait orderHandler.Initialize();\r\n\t\tdisposableEvents.push(orderHandler);\r\n\r\n\t\tconst placementHandler = new SimpleStateChangeHandler<Group>(\r\n\t\t\tadapter,\r\n\t\t\t`groups.${group.GroupID}.placement`,\r\n\t\t\t\"Placement\",\r\n\t\t\tgroup,\r\n\t\t);\r\n\t\tawait placementHandler.Initialize();\r\n\t\tdisposableEvents.push(placementHandler);\r\n\r\n\t\tconst targetPositionHandler = new PercentageStateChangeHandler<Group>(\r\n\t\t\tadapter,\r\n\t\t\t`groups.${group.GroupID}.targetPosition`,\r\n\t\t\tgroup,\r\n\t\t\t\"setTargetPositionAsync\",\r\n\t\t);\r\n\t\tawait targetPositionHandler.Initialize();\r\n\t\tdisposableEvents.push(targetPositionHandler);\r\n\r\n\t\tconst targetPositionRawHandler = new SetterStateChangeHandler<Group>(\r\n\t\t\tadapter,\r\n\t\t\t`groups.${group.GroupID}.targetPositionRaw`,\r\n\t\t\tgroup,\r\n\t\t\t\"setTargetPositionRawAsync\",\r\n\t\t);\r\n\t\tawait targetPositionRawHandler.Initialize();\r\n\t\tdisposableEvents.push(targetPositionRawHandler);\r\n\r\n\t\tconst velocityHandler = new SimpleStateChangeHandler<Group>(\r\n\t\t\tadapter,\r\n\t\t\t`groups.${group.GroupID}.velocity`,\r\n\t\t\t\"Velocity\",\r\n\t\t\tgroup,\r\n\t\t);\r\n\t\tawait velocityHandler.Initialize();\r\n\t\tdisposableEvents.push(velocityHandler);\r\n\r\n\t\treturn disposableEvents;\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": []
}

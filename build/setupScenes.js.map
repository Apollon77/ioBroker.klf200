{
  "version": 3,
  "sources": ["../src/setupScenes.ts"],
  "sourcesContent": ["\"use strict\";\r\n\r\nimport { Scene, SceneInformationEntry, Velocity } from \"klf-200-api\";\r\nimport { Disposable } from \"klf-200-api/dist/utils/TypedEvent\";\r\nimport { ComplexPropertyChangedHandler, ComplexStateChangeHandler, EchoStateChangeHandler } from \"./util/propertyLink\";\r\nimport { StateHelper } from \"./util/stateHelper\";\r\nimport { ArrayCount } from \"./util/utils\";\r\n\r\nexport class SetupScenes {\r\n\tpublic static async createScenesAsync(adapter: ioBroker.Adapter, scenes: Scene[]): Promise<Disposable[]> {\r\n\t\tconst disposableEvents: Disposable[] = [];\r\n\r\n\t\t// Remove old scenes\r\n\t\tconst currentScenesList = await adapter.getChannelsOfAsync(`scenes`);\r\n\t\tadapter.log.debug(`Current Scenes List: ${JSON.stringify(currentScenesList)}`);\r\n\t\t// Filter current channels to contain only those, that are not present in the provided scenes list\r\n\t\tconst channelsToRemove = currentScenesList.filter(\r\n\t\t\t(channel) =>\r\n\t\t\t\t!scenes.some((scene) => {\r\n\t\t\t\t\treturn scene.SceneID === Number.parseInt(channel._id.split(\".\").reverse()[0]);\r\n\t\t\t\t}),\r\n\t\t);\r\n\t\t// Delete channels\r\n\t\tfor (const channel of channelsToRemove) {\r\n\t\t\tawait adapter.deleteChannelAsync(`scenes`, channel._id);\r\n\t\t}\r\n\t\tif (channelsToRemove.length !== 0) {\r\n\t\t\tadapter.log.info(`${channelsToRemove.length} unknown scenes removed.`);\r\n\t\t}\r\n\r\n\t\tfor (const scene of scenes) {\r\n\t\t\tif (scene) {\r\n\t\t\t\tdisposableEvents.push(...(await this.createSceneAsync(adapter, scene)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Write number of products\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t`scenes.scenesFound`,\r\n\t\t\t{\r\n\t\t\t\tname: \"Number of scenes found\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tdef: 0,\r\n\t\t\t\tdesc: \"Number of scenes defined in the interface\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tArrayCount(scenes),\r\n\t\t);\r\n\r\n\t\treturn disposableEvents;\r\n\t}\r\n\r\n\tpublic static async createSceneAsync(adapter: ioBroker.Adapter, scene: Scene): Promise<Disposable[]> {\r\n\t\tconst disposableEvents: Disposable[] = [];\r\n\r\n\t\tawait adapter.setObjectNotExistsAsync(`scenes.${scene.SceneID}`, {\r\n\t\t\ttype: \"channel\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: scene.SceneName,\r\n\t\t\t\trole: \"scene\",\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t`scenes.${scene.SceneID}.productsCount`,\r\n\t\t\t{\r\n\t\t\t\tname: \"productsCount\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: \"Number of products in the scene\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tArrayCount(scene.Products),\r\n\t\t);\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t`scenes.${scene.SceneID}.products`,\r\n\t\t\t{\r\n\t\t\t\tname: \"products\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"array\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tdesc: \"Array of products in the scene\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\t{\r\n\t\t\t\tval: JSON.stringify(scene.Products),\r\n\t\t\t},\r\n\t\t);\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t`scenes.${scene.SceneID}.run`,\r\n\t\t\t{\r\n\t\t\t\tname: \"run\",\r\n\t\t\t\trole: \"button.play\",\r\n\t\t\t\ttype: \"boolean\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t\tdesc: \"Shows the running state of a scene. Set to true to run a scene.\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tscene.IsRunning,\r\n\t\t);\r\n\r\n\t\tawait StateHelper.createAndSetStateAsync(\r\n\t\t\tadapter,\r\n\t\t\t`scenes.${scene.SceneID}.stop`,\r\n\t\t\t{\r\n\t\t\t\tname: \"stop\",\r\n\t\t\t\trole: \"button.stop\",\r\n\t\t\t\ttype: \"boolean\",\r\n\t\t\t\tread: false,\r\n\t\t\t\twrite: true,\r\n\t\t\t\tdesc: \"Set to true to stop a running scene.\",\r\n\t\t\t},\r\n\t\t\t{},\r\n\t\t\tfalse,\r\n\t\t);\r\n\r\n\t\tawait adapter.setObjectNotExistsAsync(`scenes.${scene.SceneID}.velocity`, {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"velocity\",\r\n\t\t\t\trole: \"value\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: false,\r\n\t\t\t\twrite: true,\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tmax: 0xff,\r\n\t\t\t\tdesc: \"Velocity of the scene.\",\r\n\t\t\t\tstates: {\r\n\t\t\t\t\t\"0\": \"Default\",\r\n\t\t\t\t\t\"1\": \"Silent\",\r\n\t\t\t\t\t\"2\": \"Fast\",\r\n\t\t\t\t\t\"255\": \"NotAvailable\",\r\n\t\t\t\t},\r\n\t\t\t\tdef: 0,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\t// Setup scene listeners\r\n\t\tdisposableEvents.push(\r\n\t\t\tnew ComplexPropertyChangedHandler<Scene>(adapter, \"IsRunning\", scene, async (newValue) => {\r\n\t\t\t\tconst result = await adapter.setStateAsync(`scenes.${scene.SceneID}.run`, newValue as boolean, true);\r\n\t\t\t\tif (newValue === false) {\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t\tIf a running scene was stopped by using the stop state,\r\n\t\t\t\t\t\tthe stop state should be reset to false.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tawait adapter.setStateChangedAsync(`scenes.${scene.SceneID}.stop`, false, true);\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}),\r\n\t\t\tnew ComplexPropertyChangedHandler<Scene>(adapter, \"Products\", scene, async (newValue) => {\r\n\t\t\t\tawait adapter.setStateChangedAsync(\r\n\t\t\t\t\t`scenes.${scene.SceneID}.products`,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tval: JSON.stringify(newValue as SceneInformationEntry[]),\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t);\r\n\t\t\t\treturn await adapter.setStateChangedAsync(\r\n\t\t\t\t\t`scenes.${scene.SceneID}.productsCount`,\r\n\t\t\t\t\tArrayCount(newValue as SceneInformationEntry[]),\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t);\r\n\t\t\t}),\r\n\t\t);\r\n\r\n\t\t// Setup state listeners\r\n\t\tconst runListener = new ComplexStateChangeHandler(adapter, `scenes.${scene.SceneID}.run`, async (state) => {\r\n\t\t\tif (state !== undefined) {\r\n\t\t\t\tif (state?.val === true) {\r\n\t\t\t\t\t// Acknowledge running state\r\n\t\t\t\t\tawait adapter.setStateAsync(`scenes.${scene.SceneID}.run`, state, true);\r\n\t\t\t\t\t// Only start the scene if it's not running, already.\r\n\t\t\t\t\tif (!scene.IsRunning) {\r\n\t\t\t\t\t\t// Get the velocity\r\n\t\t\t\t\t\tconst velocity = (await adapter.getStateAsync(`scenes.${scene.SceneID}.velocity`))?.val as\r\n\t\t\t\t\t\t\t| Velocity\r\n\t\t\t\t\t\t\t| Velocity.Default;\r\n\t\t\t\t\t\t// Run the scene\r\n\t\t\t\t\t\tawait scene.runAsync(velocity);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tawait runListener.Initialize();\r\n\t\tdisposableEvents.push(runListener);\r\n\r\n\t\tconst stopListener = new ComplexStateChangeHandler(adapter, `scenes.${scene.SceneID}.stop`, async (state) => {\r\n\t\t\tif (state !== undefined) {\r\n\t\t\t\tif (state?.val === true) {\r\n\t\t\t\t\t// If the scene is running, acknowledge the stop state and stop the scene.\r\n\t\t\t\t\tif (scene.IsRunning) {\r\n\t\t\t\t\t\t// Acknowledge stop state first\r\n\t\t\t\t\t\tawait adapter.setStateAsync(`scenes.${scene.SceneID}.stop`, state, true);\r\n\t\t\t\t\t\tawait scene.stopAsync();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Set the stop state back to false, directly.\r\n\t\t\t\t\t\tawait adapter.setStateAsync(`scenes.${scene.SceneID}.stop`, false, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tawait stopListener.Initialize();\r\n\t\tdisposableEvents.push(stopListener);\r\n\r\n\t\tconst velocityListener = new EchoStateChangeHandler(adapter, `scenes.${scene.SceneID}.velocity`);\r\n\t\tawait velocityListener.Initialize();\r\n\t\tdisposableEvents.push(velocityListener);\r\n\r\n\t\treturn disposableEvents;\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": []
}

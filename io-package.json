{
	"common": {
		"name": "klf200",
		"version": "0.0.1",
		"news": {
			"0.0.1": {
				"en": "initial release",
				"de": "Erstveröffentlichung",
				"ru": "Начальная версия",
				"pt": "lançamento inicial",
				"nl": "Eerste uitgave",
				"fr": "Première version",
				"it": "Versione iniziale",
				"es": "Versión inicial",
				"pl": "Pierwsze wydanie",
				"zh-cn": "首次出版"
			}
		},
		"title": "KLF-200",
		"titleLang": {
			"en": "KLF-200",
			"de": "KLF-200",
			"ru": "KLF-200",
			"pt": "KLF-200",
			"nl": "KLF-200",
			"fr": "KLF-200",
			"it": "KLF-200",
			"es": "KLF-200",
			"pl": "KLF-200",
			"zh-cn": "KLF-200"
		},
		"desc": {
			"en": "Controls products and scenes connected to a KLF-200 interface",
			"de": "Steuert Produkte und Szenen, die an eine KLF-200-Schnittstelle angeschlossen sind",
			"ru": "Управляет продуктами и сценами, подключенными к интерфейсу KLF-200",
			"pt": "Controla produtos e cenas conectadas a uma interface KLF-200",
			"nl": "Bestuurt producten en scènes die zijn aangesloten op een KLF-200-interface",
			"fr": "Contrôle des produits et des scènes connectés à une interface KLF-200",
			"it": "Controlla i prodotti e le scene connesse a un'interfaccia KLF-200",
			"es": "Controla productos y escenas conectadas a una interfaz KLF-200",
			"pl": "Kontroluje produkty i sceny podłączone do interfejsu KLF-200",
			"zh-cn": "控制连接到KLF-200接口的产品和场景"
		},
		"authors": ["Michael Schroeder <klf200@gmx.de>"],
		"keywords": ["KLF-200", "VELUX"],
		"license": "MIT",
		"platform": "Javascript/Node.js",
		"main": "build/main.js",
		"icon": "klf200.png",
		"enabled": true,
		"extIcon": "https://raw.githubusercontent.com/MiSchroe/ioBroker.klf200/master/admin/klf200.png",
		"readme": "https://github.com/MiSchroe/ioBroker.klf200/blob/master/README.md",
		"loglevel": "info",
		"mode": "daemon",
		"type": "hardware",
		"compact": true,
		"connectionType": "local",
		"dataSource": "push",
		"materialize": true,
		"dependencies": [
			{
				"js-controller": ">=1.4.2"
			}
		]
	},
	"native": {},
	"objects": [],
	"instanceObjects": [
		{
			"_id": "info",
			"type": "channel",
			"common": {
				"name": "Information"
			},
			"native": {}
		},
		{
			"_id": "info.connection",
			"type": "state",
			"common": {
				"role": "indicator.connected",
				"name": "Device or service connected",
				"type": "boolean",
				"read": true,
				"write": false,
				"def": false
			},
			"native": {}
		}
	]
}
